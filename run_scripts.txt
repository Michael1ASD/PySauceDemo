Allure run script with reports:
1.  reports:
$env:APP_ENV='dev'; pytest --alluredir=reports test_cases/test_login.py

2. Generate reports
allure generate reports --clean

3. Open reports:
allure serve reports


Pytest - konfiguracje uruchamiania
pytest [ścieżka_do_testów] --browser=<nazwa>
Uruchamia wszystkie testy w określonym folderze lub pliku. Domyślnie przeszukuje bieżący katalog.

-v lub --verbose
Uruchamia testy w trybie szczegółowym. Wyświetla więcej informacji o każdym teście, w tym jego nazwę i status (przeszedł/nie przeszedł).

-q lub --quiet
Uruchamia testy w trybie cichym. Wyświetla mniej informacji, co czyni wyniki bardziej skondensowanymi.

-k <wyrażenie>
Uruchamia tylko te testy, których nazwy pasują do określonego wyrażenia. Na przykład:

pytest -k "test_example"
Uruchomi tylko testy, które zawierają "test_example" w nazwie.

-m <marka>
Uruchamia tylko testy oznaczone określoną marką. Na przykład:
pytest -m "slow"
Uruchomi testy oznaczone marką slow.

--disable-warnings
Wyłącza ostrzeżenia. Przydatne, gdy chcemy skupić się na wynikach testów bez zakłóceń od ostrzeżeń.

--tb=<style>
Umożliwia wybór stylu śledzenia błędów. Opcje to: auto, long, short, line, native, no. Na przykład:

pytest --tb=short
--html=<plik.html>
Generuje raport HTML po zakończeniu testów. Możliwe jest również dodanie opcji --self-contained-html, aby umieścić wszystkie zasoby w jednym pliku.

--browser=<nazwa>
Używana w Twoim przypadku, pozwala na określenie, którą przeglądarkę użyć do testów.

--fixtures
Wyświetla listę dostępnych fixture w danym projekcie.

--collect-only
Zbiera testy i wyświetla je bez ich uruchamiania. Pomocne do sprawdzenia, czy pytest poprawnie rozpoznał testy.

-h lub --help
Wyświetla pomoc i listę wszystkich dostępnych opcji.



# Scripts to run tests
# $env:APP_ENV='prod'; pytest -v test_cases/test_login.py
# $env:APP_ENV='dev'; pytest -v test_cases/test_login.py
